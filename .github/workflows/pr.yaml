#
# Copyright (c) 2020 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

name: PR

# Trigger the workflow on push
on:
  pull_request:
    branches: [master]

env:
  DIR_DASHBOARD: che-dashboard
  DIR_CHE: che
  IMAGE_VERSION: che-dashboard-pull-${{ github.event.pull_request.number }}
  ORGANIZATION: docker.io/maxura

jobs:

  che-dashboard-build:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      -
        name: 'Docker Buildx'
        uses: crazy-max/ghaction-docker-buildx@v3
      -
        name: 'Checkout Source Code'
        uses: actions/checkout@v2
        with:
          path: ${{ env.DIR_DASHBOARD }}
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: 'Cache Docker layers'
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: 'Docker Prepare'
        run: docker image prune -a -f
      -
        name: 'Docker docker.io Login'
        run: |
          docker login -u "${{ secrets.DOCKERHUB_MAXURA_USERNAME }}" -p "${{ secrets.DOCKERHUB_MAXURA_PASSWORD }}" docker.io
      -
        name: 'Docker Buildx (build)'
        id: che-dashboard-docker-build
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 100
          max_attempts: 5
          retry_wait_seconds: 60
          command: |
            cd ${GITHUB_WORKSPACE}/${DIR_DASHBOARD} && docker buildx build --cache-from "type=local,src=/tmp/.buildx-cache" --cache-to "type=local,dest=/tmp/.buildx-cache" --platform linux/amd64,linux/s390x --push --tag ${ORGANIZATION}/che-dashboard:${IMAGE_VERSION} --file apache.Dockerfile .
      -
        name: 'Docker Logout'
        run: |
          docker logout

  che-server-build:
    needs: che-dashboard-build
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      -
        name: 'Checkout Source Code'
        uses: actions/checkout@v2
        with:
          repository: 'eclipse/che'
          ref: master
          path: ${{ env.DIR_CHE }}
      -
        name: 'Set up JDK 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11
      -
        name: 'Cache Local Maven Repository'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      -
        name: 'Maven Build'
        run: |
          cd ${GITHUB_WORKSPACE}/${DIR_CHE} && mvn clean install -DskipTests
      -
        name: 'Docker Build'
        uses: nick-invision/retry@v1
        env:
          CHE_VERSION: next
        with:
          timeout_minutes: 100
          max_attempts: 5
          retry_wait_seconds: 60
          command: |
            bash ${GITHUB_WORKSPACE}/${DIR_CHE}/dockerfiles/che/build.sh --skip-tests --tag:${IMAGE_VERSION} --organization:${ORGANIZATION} --build-arg:"CHE_DASHBOARD_VERSION=${IMAGE_VERSION},CHE_DASHBOARD_ORGANIZATION=${ORGANIZATION},CHE_WORKSPACE_LOADER_VERSION=${CHE_VERSION}"
      -
        name: 'Docker docker.io Login'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_MAXURA_USERNAME }}
          password: ${{ secrets.DOCKERHUB_MAXURA_PASSWORD }}
      -
        name: 'Docker Push'
        run: |
          docker push ${ORGANIZATION}/che-server:${IMAGE_VERSION}
      -
        name: 'Docker Logout'
        run: docker logout
      -
        name: 'Comment with image name'
        uses: actions/github-script@v3
        with:
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            const imageCheServer = '${{env.ORGANIZATION}}/che-server:${{env.IMAGE_VERSION}}';
            github.issues.createComment({ issue_number, owner, repo, body: 'Docker image build succeeded: **' + imageCheServer + '**' });
